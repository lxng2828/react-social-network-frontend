import React, { useState, useEffect } from 'react';
import { Button, Space, Spin, message, Tooltip, Dropdown, Modal } from 'antd';
import {
    UserAddOutlined,
    ClockCircleOutlined,
    CheckOutlined,
    CloseOutlined,
    TeamOutlined,
    UserDeleteOutlined,
    DownOutlined
} from '@ant-design/icons';
import {
    sendFriendRequest,
    getFriendshipStatus,
    acceptFriendRequest,
    declineFriendRequest,
    cancelFriendRequest,
    removeFriend
} from '../../services/friendshipService';

const FriendshipActions = ({
    targetUserId,
    isOwnProfile,
    currentUserId,
    onFriendshipChange
}) => {
    const [friendshipStatus, setFriendshipStatus] = useState(null);
    const [loading, setLoading] = useState(false);
    const [sendingRequest, setSendingRequest] = useState(false);
    const [acceptingRequest, setAcceptingRequest] = useState(false);
    const [decliningRequest, setDecliningRequest] = useState(false);
    const [cancelingRequest, setCancelingRequest] = useState(false);
    const [removingFriend, setRemovingFriend] = useState(false);

    // State cho popup x√°c nh·∫≠n
    const [confirmModalVisible, setConfirmModalVisible] = useState(false);
    const [confirmAction, setConfirmAction] = useState(null);
    const [confirmFriendshipId, setConfirmFriendshipId] = useState(null);
    const [confirmLoading, setConfirmLoading] = useState(false);
    const [confirmMessage, setConfirmMessage] = useState('');

    // Helper function ƒë·ªÉ normalize tr·∫°ng th√°i friendship
    const normalizeStatus = (status) => {
        if (!status) return null;

        const normalized = status.toString().toLowerCase();
        console.log('üîÑ Normalize status:', status, '->', normalized);
        console.log('üîÑ Type c·ªßa status:', typeof status);
        console.log('üîÑ Status g·ªëc:', JSON.stringify(status, null, 2));

        // Ki·ªÉm tra tr∆∞·ªùng h·ª£p 'not_friends' tr∆∞·ªõc ƒë·ªÉ tr√°nh hi·ªÉu nh·∫ßm
        if (normalized === 'not_friends' || normalized === 'none') {
            console.log('‚úÖ Match NONE (not_friends)');
            return 'NONE';
        }

        if (normalized.includes('pending_sent') || normalized.includes('sent')) {
            console.log('‚úÖ Match PENDING_SENT');
            return 'PENDING_SENT';
        }
        if (normalized.includes('pending_received') || normalized.includes('received')) {
            console.log('‚úÖ Match PENDING_RECEIVED');
            return 'PENDING_RECEIVED';
        }
        if (normalized === 'friends' || normalized === 'accepted') {
            console.log('‚úÖ Match FRIENDS (ch√≠nh x√°c)');
            return 'FRIENDS';
        }

        console.log('‚ö†Ô∏è Kh√¥ng match v·ªõi pattern n√†o, tr·∫£ v·ªÅ:', normalized.toUpperCase());
        return normalized.toUpperCase();
    };

    // H√†m hi·ªÉn th·ªã popup x√°c nh·∫≠n
    const showConfirmModal = (action, friendshipId, message) => {
        setConfirmAction(action);
        setConfirmFriendshipId(friendshipId);
        setConfirmMessage(message);
        setConfirmModalVisible(true);
        console.log('üîÑ Hi·ªÉn th·ªã popup x√°c nh·∫≠n cho:', action, 'v·ªõi ID:', friendshipId);
    };

    // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n trong popup
    const handleConfirm = async () => {
        if (!confirmAction || !confirmFriendshipId) return;

        setConfirmLoading(true);
        console.log('üîÑ X√°c nh·∫≠n th·ª±c hi·ªán:', confirmAction, 'v·ªõi ID:', confirmFriendshipId);

        try {
            switch (confirmAction) {
                case 'decline':
                    await handleDeclineRequest(confirmFriendshipId);
                    break;
                case 'remove':
                    await handleRemoveFriend(confirmFriendshipId);
                    break;
                default:
                    console.error('‚ùå H√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£:', confirmAction);
                    break;
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông:', error);
        } finally {
            setConfirmLoading(false);
            setConfirmModalVisible(false);
            setConfirmAction(null);
            setConfirmFriendshipId(null);
            setConfirmMessage('');
        }
    };

    // Ki·ªÉm tra tr·∫°ng th√°i friendship khi component mount
    useEffect(() => {
        const checkFriendshipStatus = async () => {
            if (!isOwnProfile && targetUserId && currentUserId) {
                setLoading(true);
                try {
                    const status = await getFriendshipStatus(targetUserId);
                    console.log('üîÑ API tr·∫£ v·ªÅ tr·∫°ng th√°i:', status);
                    console.log('üîÑ Type c·ªßa status:', typeof status);
                    console.log('üîÑ Status g·ªëc:', JSON.stringify(status, null, 2));

                    // Merge d·ªØ li·ªáu t·ª´ API status v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i
                    if (status && status.data) {
                        const apiData = status.data;
                        console.log('üîÑ D·ªØ li·ªáu t·ª´ API status:', apiData);
                        console.log('üîÑ apiData.status:', apiData.status);
                        console.log('üîÑ apiData.friendshipId:', apiData.friendshipId);

                        // T·∫°o tr·∫°ng th√°i m·ªõi v·ªõi c·∫£ id v√† friendshipId
                        const mergedStatus = {
                            status: apiData.status,
                            id: apiData.friendshipId, // S·ª≠ d·ª•ng friendshipId t·ª´ API status
                            friendshipId: apiData.friendshipId, // Gi·ªØ nguy√™n friendshipId
                            senderId: currentUserId,
                            receiverId: targetUserId
                        };

                        console.log('üîÑ Tr·∫°ng th√°i merged:', mergedStatus);
                        console.log('üîÑ mergedStatus.status s·∫Ω ƒë∆∞·ª£c normalize:', mergedStatus.status);
                        setFriendshipStatus(mergedStatus);
                    } else {
                        console.log('‚ö†Ô∏è Status kh√¥ng c√≥ data, set tr·ª±c ti·∫øp:', status);
                        setFriendshipStatus(status);
                    }
                } catch (error) {
                    console.error('L·ªói ki·ªÉm tra tr·∫°ng th√°i friendship:', error);
                    message.error('Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i k·∫øt b·∫°n');
                } finally {
                    setLoading(false);
                }
            }
        };

        checkFriendshipStatus();
    }, [isOwnProfile, targetUserId, currentUserId]);

    // G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
    const handleSendFriendRequest = async () => {
        if (!targetUserId) return;

        try {
            setSendingRequest(true);
            const response = await sendFriendRequest(targetUserId);
            message.success('ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n!');

            console.log('‚úÖ G·ª≠i l·ªùi m·ªùi th√†nh c√¥ng, response:', response);

            // L·∫•y friendshipId t·ª´ response API
            // API tr·∫£ v·ªÅ FriendshipResponseDto v·ªõi id c·ªßa friendship
            const friendshipId = response?.id;

            if (!friendshipId) {
                console.error('‚ùå Kh√¥ng c√≥ friendshipId t·ª´ API response');
                message.error('Kh√¥ng th·ªÉ l·∫•y ID l·ªùi m·ªùi k·∫øt b·∫°n');
                return;
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i friendship v·ªõi ID th·ª±c t·∫ø
            // API tr·∫£ v·ªÅ status: "PENDING", nh∆∞ng ch√∫ng ta c·∫ßn ph√¢n bi·ªát PENDING_SENT vs PENDING_RECEIVED
            const pendingStatus = {
                status: 'PENDING_SENT', // Ch√∫ng ta t·ª± set ƒë·ªÉ ph√¢n bi·ªát
                id: friendshipId, // ID t·ª´ API g·ª≠i l·ªùi m·ªùi
                friendshipId: friendshipId, // Th√™m friendshipId ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi API status
                senderId: currentUserId,
                receiverId: targetUserId,
                createdAt: response?.createdAt || new Date().toISOString(),
                originalStatus: response?.status // Gi·ªØ l·∫°i status g·ªëc t·ª´ API
            };

            console.log('üîÑ Set tr·∫°ng th√°i PENDING_SENT v·ªõi ID th·ª±c:', pendingStatus);
            setFriendshipStatus(pendingStatus);

            // Th√¥ng b√°o cho component cha
            if (onFriendshipChange) {
                onFriendshipChange(pendingStatus);
            }

        } catch (error) {
            console.error('‚ùå L·ªói g·ª≠i l·ªùi m·ªùi:', error);
            message.error(error.message || 'G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th·∫•t b·∫°i!');
        } finally {
            setSendingRequest(false);
        }
    };

    // Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
    const handleAcceptRequest = async (friendshipId) => {
        if (!friendshipId) return;

        try {
            setAcceptingRequest(true);
            await acceptFriendRequest(friendshipId);
            message.success('ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n!');

            console.log('‚úÖ Ch·∫•p nh·∫≠n l·ªùi m·ªùi th√†nh c√¥ng, friendshipId:', friendshipId);

            // Sau khi ch·∫•p nh·∫≠n, c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh FRIENDS
            const friendsStatus = {
                status: 'FRIENDS',
                id: friendshipId,
                friendshipId: friendshipId,
                senderId: currentUserId,
                receiverId: targetUserId
            };

            console.log('üîÑ Set tr·∫°ng th√°i FRIENDS sau khi ch·∫•p nh·∫≠n:', friendsStatus);
            setFriendshipStatus(friendsStatus);

            // Th√¥ng b√°o cho component cha
            if (onFriendshipChange) {
                onFriendshipChange(friendsStatus);
            }

        } catch (error) {
            console.error('‚ùå L·ªói ch·∫•p nh·∫≠n l·ªùi m·ªùi:', error);
            message.error(error.message || 'Ch·∫•p nh·∫≠n l·ªùi m·ªùi th·∫•t b·∫°i!');
        } finally {
            setAcceptingRequest(false);
        }
    };

    // T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
    const handleDeclineRequest = async (friendshipId) => {
        if (!friendshipId) return;

        try {
            setDecliningRequest(true);
            await declineFriendRequest(friendshipId);
            message.success('ƒê√£ t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n!');

            console.log('‚úÖ T·ª´ ch·ªëi l·ªùi m·ªùi th√†nh c√¥ng, friendshipId:', friendshipId);

            // Sau khi t·ª´ ch·ªëi, c·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ NONE
            const noneStatus = {
                status: 'NONE',
                id: null,
                friendshipId: null,
                senderId: null,
                receiverId: null
            };

            console.log('üîÑ Set tr·∫°ng th√°i NONE sau khi t·ª´ ch·ªëi:', noneStatus);
            setFriendshipStatus(noneStatus);

            // Th√¥ng b√°o cho component cha
            if (onFriendshipChange) {
                onFriendshipChange(noneStatus);
            }

        } catch (error) {
            console.error('‚ùå L·ªói t·ª´ ch·ªëi l·ªùi m·ªùi:', error);
            message.error(error.message || 'T·ª´ ch·ªëi l·ªùi m·ªùi th·∫•t b·∫°i!');
        } finally {
            setDecliningRequest(false);
        }
    };

    // H·ªßy l·ªùi m·ªùi k·∫øt b·∫°n
    const handleCancelRequest = async (friendshipId) => {
        console.log('üîÑ B·∫Øt ƒë·∫ßu h·ªßy l·ªùi m·ªùi, friendshipId:', friendshipId);
        console.log('üîÑ friendshipStatus hi·ªán t·∫°i:', friendshipStatus);

        // S·ª≠ d·ª•ng friendshipId t·ª´ parameter ho·∫∑c t·ª´ friendshipStatus
        const actualFriendshipId = friendshipId || friendshipStatus?.id || friendshipStatus?.friendshipId;

        if (!actualFriendshipId) {
            console.error('‚ùå Kh√¥ng c√≥ friendshipId ƒë·ªÉ h·ªßy');
            console.error('‚ùå friendshipStatus:', friendshipStatus);
            message.error('Kh√¥ng c√≥ ID l·ªùi m·ªùi ƒë·ªÉ h·ªßy');
            return;
        }

        try {
            setCancelingRequest(true);
            console.log('üîÑ G·ªçi API cancelFriendRequest v·ªõi ID:', actualFriendshipId);

            const response = await cancelFriendRequest(actualFriendshipId);
            console.log('‚úÖ API cancelFriendRequest th√†nh c√¥ng, response:', response);

            message.success('ƒê√£ h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n!');

            // Sau khi h·ªßy l·ªùi m·ªùi, c·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ NONE
            const noneStatus = {
                status: 'NONE',
                id: null,
                friendshipId: null,
                senderId: null,
                receiverId: null
            };

            console.log('üîÑ Set tr·∫°ng th√°i NONE sau khi h·ªßy l·ªùi m·ªùi:', noneStatus);
            setFriendshipStatus(noneStatus);

            // Th√¥ng b√°o cho component cha
            if (onFriendshipChange) {
                onFriendshipChange(noneStatus);
            }

        } catch (error) {
            console.error('‚ùå L·ªói h·ªßy l·ªùi m·ªùi:', error);
            console.error('‚ùå Error details:', {
                message: error.message,
                stack: error.stack,
                friendshipId,
                currentStatus: friendshipStatus
            });
            message.error(error.message || 'H·ªßy l·ªùi m·ªùi th·∫•t b·∫°i!');
        } finally {
            setCancelingRequest(false);
        }
    };

    // H·ªßy k·∫øt b·∫°n
    const handleRemoveFriend = async (friendshipId) => {
        if (!friendshipId) return;

        try {
            setRemovingFriend(true);
            await removeFriend(friendshipId);
            message.success('ƒê√£ h·ªßy k·∫øt b·∫°n!');

            console.log('‚úÖ H·ªßy k·∫øt b·∫°n th√†nh c√¥ng, friendshipId:', friendshipId);

            // Sau khi h·ªßy k·∫øt b·∫°n, c·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ NONE
            const noneStatus = {
                status: 'NONE',
                id: null,
                friendshipId: null,
                senderId: null,
                receiverId: null
            };

            console.log('üîÑ Set tr·∫°ng th√°i NONE sau khi h·ªßy k·∫øt b·∫°n:', noneStatus);
            setFriendshipStatus(noneStatus);

            // Th√¥ng b√°o cho component cha
            if (onFriendshipChange) {
                onFriendshipChange(noneStatus);
            }

        } catch (error) {
            console.error('‚ùå L·ªói h·ªßy k·∫øt b·∫°n:', error);
            message.error(error.message || 'H·ªßy k·∫øt b·∫°n th·∫•t b·∫°i!');
        } finally {
            setRemovingFriend(false);
        }
    };

    // Kh√¥ng hi·ªÉn th·ªã g√¨ n·∫øu l√† profile c·ªßa ch√≠nh m√¨nh
    if (isOwnProfile) {
        return null;
    }

    // Loading state
    if (loading) {
        return (
            <div style={{ textAlign: "center" }}>
                <Spin size="small" />
                <div style={{ marginTop: 8, fontSize: '12px', color: '#666' }}>
                    ƒêang ki·ªÉm tra...
                </div>
            </div>
        );
    }

    // Render c√°c actions d·ª±a tr√™n tr·∫°ng th√°i friendship
    if (friendshipStatus) {
        const rawStatus = friendshipStatus.status;
        const status = normalizeStatus(rawStatus);

        console.log('üîç Render FriendshipActions:', {
            friendshipStatus,
            rawStatus,
            normalizedStatus: status,
            targetUserId,
            currentUserId
        });
        console.log('üîç So s√°nh status === "FRIENDS":', status === 'FRIENDS');
        console.log('üîç So s√°nh status === "NONE":', status === 'NONE');
        console.log('üîç So s√°nh status === "PENDING_SENT":', status === 'PENDING_SENT');
        console.log('üîç So s√°nh status === "PENDING_RECEIVED":', status === 'PENDING_RECEIVED');

        // ƒê√£ g·ª≠i l·ªùi m·ªùi - hi·ªÉn th·ªã "ƒê√£ g·ª≠i" v·ªõi tooltip "H·ªßy l·ªùi m·ªùi"
        if (status === 'PENDING_SENT') {
            console.log('‚úÖ Render PENDING_SENT state v·ªõi ID:', friendshipStatus.id);
            console.log('‚úÖ friendshipId t·ª´ API status:', friendshipStatus.friendshipId);

            // S·ª≠ d·ª•ng friendshipId t·ª´ API status n·∫øu c√≥, fallback v·ªÅ id
            const actualId = friendshipStatus.friendshipId || friendshipStatus.id;

            return (
                <>
                    <Tooltip title="H·ªßy l·ªùi m·ªùi" placement="top">
                        <Button
                            type="default"
                            icon={<ClockCircleOutlined />}
                            style={{ width: '100%' }}
                            size="large"
                            onClick={() => {
                                console.log('üñ±Ô∏è Click v√†o n√∫t "ƒê√£ g·ª≠i"');
                                console.log('üñ±Ô∏è friendshipStatus.id:', friendshipStatus.id);
                                console.log('üñ±Ô∏è friendshipStatus.friendshipId:', friendshipStatus.friendshipId);
                                console.log('üñ±Ô∏è S·ª≠ d·ª•ng ID:', actualId);
                                handleCancelRequest(actualId);
                            }}
                            loading={cancelingRequest}
                        >
                            ƒê√£ g·ª≠i
                        </Button>
                    </Tooltip>

                    {/* Modal x√°c nh·∫≠n */}
                    <ConfirmModal
                        visible={confirmModalVisible}
                        onOk={handleConfirm}
                        onCancel={() => {
                            setConfirmModalVisible(false);
                            setConfirmAction(null);
                            setConfirmFriendshipId(null);
                            setConfirmMessage('');
                        }}
                        loading={confirmLoading}
                        message={confirmMessage}
                        action={confirmAction}
                    />
                </>
            );
        }

        // ƒê√£ nh·∫≠n l·ªùi m·ªùi
        if (status === 'PENDING_RECEIVED') {
            console.log('‚úÖ Render PENDING_RECEIVED state');
            console.log('‚úÖ friendshipStatus.id:', friendshipStatus.id);
            console.log('‚úÖ friendshipStatus.friendshipId:', friendshipStatus.friendshipId);

            // S·ª≠ d·ª•ng friendshipId t·ª´ API status n·∫øu c√≥, fallback v·ªÅ id
            const actualId = friendshipStatus.friendshipId || friendshipStatus.id;
            console.log('‚úÖ S·ª≠ d·ª•ng ID ƒë·ªÉ ch·∫•p nh·∫≠n/t·ª´ ch·ªëi:', actualId);

            return (
                <>
                    <Space direction="vertical" style={{ width: '100%' }}>
                        <Button
                            type="primary"
                            icon={<CheckOutlined />}
                            size="small"
                            style={{ width: '100%' }}
                            onClick={() => {
                                console.log('üñ±Ô∏è Click v√†o n√∫t "Ch·∫•p nh·∫≠n"');
                                console.log('üñ±Ô∏è S·ª≠ d·ª•ng ID:', actualId);
                                handleAcceptRequest(actualId);
                            }}
                            loading={acceptingRequest}
                        >
                            Ch·∫•p nh·∫≠n
                        </Button>
                        <Button
                            danger
                            icon={<CloseOutlined />}
                            size="small"
                            style={{ width: '100%' }}
                            onClick={() => {
                                console.log('üñ±Ô∏è Click v√†o n√∫t "T·ª´ ch·ªëi"');
                                console.log('üñ±Ô∏è S·ª≠ d·ª•ng ID:', actualId);
                                showConfirmModal('decline', actualId, 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n n√†y?');
                            }}
                            loading={decliningRequest}
                        >
                            T·ª´ ch·ªëi
                        </Button>
                    </Space>

                    {/* Modal x√°c nh·∫≠n */}
                    <ConfirmModal
                        visible={confirmModalVisible}
                        onOk={handleConfirm}
                        onCancel={() => {
                            setConfirmModalVisible(false);
                            setConfirmAction(null);
                            setConfirmFriendshipId(null);
                            setConfirmMessage('');
                        }}
                        loading={confirmLoading}
                        message={confirmMessage}
                        action={confirmAction}
                    />
                </>
            );
        }

        // ƒê√£ l√† b·∫°n b√® - hi·ªÉn th·ªã "B·∫°n b√®" v·ªõi dropdown ƒë·ªÉ h·ªßy k·∫øt b·∫°n
        if (status === 'FRIENDS') {
            console.log('‚úÖ Render FRIENDS state');
            console.log('‚úÖ friendshipStatus.id:', friendshipStatus.id);
            console.log('‚úÖ friendshipStatus.friendshipId:', friendshipStatus.friendshipId);

            // S·ª≠ d·ª•ng friendshipId t·ª´ API status n·∫øu c√≥, fallback v·ªÅ id
            const actualId = friendshipStatus.friendshipId || friendshipStatus.id;
            console.log('‚úÖ S·ª≠ d·ª•ng ID ƒë·ªÉ h·ªßy k·∫øt b·∫°n:', actualId);

            const friendMenuItems = [
                {
                    key: 'remove',
                    label: 'H·ªßy k·∫øt b·∫°n',
                    icon: <UserDeleteOutlined />,
                    danger: true,
                    onClick: () => {
                        console.log('üñ±Ô∏è Click v√†o "H·ªßy k·∫øt b·∫°n" trong dropdown');
                        console.log('üñ±Ô∏è S·ª≠ d·ª•ng ID:', actualId);
                        showConfirmModal('remove', actualId, 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy k·∫øt b·∫°n v·ªõi ng∆∞·ªùi n√†y?');
                    }
                }
            ];

            return (
                <>
                    <Dropdown
                        menu={{ items: friendMenuItems }}
                        placement="bottomRight"
                        trigger={['hover']}
                    >
                        <Button
                            type="default"
                            icon={<TeamOutlined />}
                            style={{ width: '100%' }}
                            size="large"
                            loading={removingFriend}
                        >
                            B·∫°n b√® <DownOutlined />
                        </Button>
                    </Dropdown>

                    {/* Modal x√°c nh·∫≠n */}
                    <ConfirmModal
                        visible={confirmModalVisible}
                        onOk={handleConfirm}
                        onCancel={() => {
                            setConfirmModalVisible(false);
                            setConfirmAction(null);
                            setConfirmFriendshipId(null);
                            setConfirmMessage('');
                        }}
                        loading={confirmLoading}
                        message={confirmMessage}
                        action={confirmAction}
                    />
                </>
            );
        }

        // Ch∆∞a k·∫øt b·∫°n - hi·ªÉn th·ªã "K·∫øt b·∫°n" v·ªõi m√†u primary
        if (status === 'NONE') {
            console.log('‚úÖ Render NONE state');
            return (
                <>
                    <Button
                        type="primary"
                        icon={<UserAddOutlined />}
                        loading={sendingRequest}
                        onClick={handleSendFriendRequest}
                        style={{ width: '100%' }}
                        size="large"
                    >
                        K·∫øt b·∫°n
                    </Button>

                    {/* Modal x√°c nh·∫≠n */}
                    <ConfirmModal
                        visible={confirmModalVisible}
                        onOk={handleConfirm}
                        onCancel={() => {
                            setConfirmModalVisible(false);
                            setConfirmAction(null);
                            setConfirmFriendshipId(null);
                            setConfirmMessage('');
                        }}
                        loading={confirmLoading}
                        message={confirmMessage}
                        action={confirmAction}
                    />
                </>
            );
        }

        console.log('‚ö†Ô∏è Kh√¥ng match v·ªõi tr·∫°ng th√°i n√†o, rawStatus:', rawStatus, 'normalizedStatus:', status);
    }

    // Fallback: Hi·ªÉn th·ªã n√∫t k·∫øt b·∫°n khi ch∆∞a c√≥ tr·∫°ng th√°i
    console.log('üîÑ Render fallback state (no friendshipStatus)');
    return (
        <>
            <Button
                type="primary"
                icon={<UserAddOutlined />}
                loading={sendingRequest}
                onClick={handleSendFriendRequest}
                style={{ width: '100%' }}
                size="large"
            >
                K·∫øt b·∫°n
            </Button>

            {/* Modal x√°c nh·∫≠n - lu√¥n ƒë∆∞·ª£c render */}
            <ConfirmModal
                visible={confirmModalVisible}
                onOk={handleConfirm}
                onCancel={() => {
                    setConfirmModalVisible(false);
                    setConfirmAction(null);
                    setConfirmFriendshipId(null);
                    setConfirmMessage('');
                }}
                loading={confirmLoading}
                message={confirmMessage}
                action={confirmAction}
            />
        </>
    );
};

// Modal x√°c nh·∫≠n - lu√¥n ƒë∆∞·ª£c render b√™n ngo√†i component ch√≠nh
const ConfirmModal = ({
    visible,
    onOk,
    onCancel,
    loading,
    message,
    action
}) => (
    <Modal
        title="X√°c nh·∫≠n h√†nh ƒë·ªông"
        open={visible}
        onOk={onOk}
        onCancel={onCancel}
        confirmLoading={loading}
        okText="X√°c nh·∫≠n"
        cancelText="H·ªßy"
        okButtonProps={{
            danger: action === 'remove' || action === 'decline'
        }}
    >
        <p>{message}</p>
    </Modal>
);

export default FriendshipActions;
